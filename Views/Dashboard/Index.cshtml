@model panasonic.ViewModels.DashboardViewModel.IndexViewModel;

@{
    ViewData["PanelTitle"] = "Dashboard";
}

<div class="row row-card-no-pd mt--2">
    <div class="col-sm-6 col-md-4">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="fas fa-users text-warning"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Manage User</p>
                            <h4 class="card-title">@Model.UserCount Users</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="col-sm-6 col-md-4">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="fas fa-users text-warning"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Manage Raw Materials</p>
                            <h4 class="card-title">@Model.MaterialCount Raw Materials</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div class="col-sm-6 col-md-4">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="flaticon-coins text-success"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Manage Production Line</p>
                            <h4 class="card-title">@Model.ProductionLineCount Line</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

@* Material Transaction *@
<div class="row row-card-no-pd mt--2">
    <div class="col-sm-6 col-md-3">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="fas fa-users text-warning"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Material Send</p>
                            <h4 class="card-title">@Model.TransactionCounts.Where(t => t.Type ==
                                TransactionTypes.Send).Select(t => t.Count).FirstOrDefault() x</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="col-sm-6 col-md-3">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="fas fa-users text-warning"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Production</p>
                            <h4 class="card-title">@Model.TransactionCounts.Where(t => t.Type ==
                                TransactionTypes.Production).Select(t => t.Count).FirstOrDefault() x</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div class="col-sm-6 col-md-3">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="flaticon-coins text-success"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Material Pickup</p>
                            <h4 class="card-title">@Model.TransactionCounts.Where(t => t.Type ==
                                TransactionTypes.Pickup).Select(t => t.Count).FirstOrDefault() x</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-6 col-md-3">
        <div class="card card-stats card-round">
            <div class="card-body ">
                <div class="row">
                    <div class="col-5">
                        <div class="icon-big text-center">
                            <i class="flaticon-coins text-success"></i>
                        </div>
                    </div>
                    <div class="col-7 col-stats">
                        <div class="numbers">
                            <p class="card-category">Material Return</p>
                            <h4 class="card-title">@Model.TransactionCounts.Where(t => t.Type ==
                                TransactionTypes.Return).Select(t => t.Count).FirstOrDefault() x</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">

    <div class="col-md-8">
        <div class="card ">
            <div class="card-body">
                <div id="chart-container" style="min-height: 300px;">
                    <canvas id="lineChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card ">
            <div class="card-header">
                <div class="card-title">
                    Most Material Used For Production
                </div>
            </div>
            <div class="card-body">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Material Name</th>
                            <th>Quantity Used</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var material in Model.Materials)
                        {
                            <tr>
                                <td>@material.MaterialName</td>
                                <td>@material.QuantityUsed</td>
                            </tr>

                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        console.log(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas)));

        let labels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas.Where(d => d.Type == "Send").OrderBy(d => d.Date).Select(d => d.Date).ToList()));;
        let sendData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas.Where(d => d.Type == "Send").OrderBy(d => d.Date).Select(d => d.Count).ToList()));
        let productionData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas.Where(d => d.Type == "Production").OrderBy(d => d.Date).Select(d => d.Count).ToList()));
        let returnData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas.Where(d => d.Type == "Return").OrderBy(d => d.Date).Select(d => d.Count).ToList()));
        let pickupData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AnalitycsDatas.Where(d => d.Type == "Pickup").OrderBy(d => d.Date).Select(d => d.Count).ToList()));

        var lineChart = document.getElementById('lineChart').getContext('2d');


        var myLineChart = new Chart(lineChart, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: "Production",
                    borderColor: "#1d7af3",
                    pointBorderColor: "#FFF",
                    pointBackgroundColor: "#1d7af3",
                    pointBorderWidth: 2,
                    pointHoverRadius: 4,
                    pointHoverBorderWidth: 1,
                    pointRadius: 4,
                    backgroundColor: 'transparent',
                    fill: true,
                    borderWidth: 2,
                    data: productionData
                }, {
                    label: "Send",
                    borderColor: "#198754",
                    pointBorderColor: "#198754",
                    pointBackgroundColor: "#198754",
                    pointBorderWidth: 2,
                    pointHoverRadius: 4,
                    pointHoverBorderWidth: 1,
                    pointRadius: 4,
                    backgroundColor: 'transparent',
                    fill: true,
                    borderWidth: 2,
                    data: sendData
                },
                {
                    label: "Return",
                    borderColor: "#dc3545",
                    pointBorderColor: "#dc3545",
                    pointBackgroundColor: "#dc3545",
                    pointBorderWidth: 2,
                    pointHoverRadius: 4,
                    pointHoverBorderWidth: 1,
                    pointRadius: 4,
                    backgroundColor: 'transparent',
                    fill: true,
                    borderWidth: 2,
                    data: returnData
                },
                {
                    label: "Pickup",
                    borderColor: "#ffc107",
                    pointBorderColor: "#ffc107",
                    pointBackgroundColor: "#ffc107",
                    pointBorderWidth: 2,
                    pointHoverRadius: 4,
                    pointHoverBorderWidth: 1,
                    pointRadius: 4,
                    backgroundColor: 'transparent',
                    fill: true,
                    borderWidth: 2,
                    data: pickupData
                },

                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 10,
                        fontColor: '#1d7af3',
                    }
                },
                tooltips: {
                    bodySpacing: 4,
                    mode: "nearest",
                    intersect: 0,
                    position: "nearest",
                    xPadding: 10,
                    yPadding: 10,
                    caretPadding: 10
                },
                layout: {
                    padding: { left: 15, right: 15, top: 15, bottom: 15 }
                }
            }
        });


    </script>
}